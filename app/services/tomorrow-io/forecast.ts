import "dotenv/config";
// Define the structure of the forecast response - Generated by ChatGPT ðŸ¤–
export interface ForecastResponse {
  timelines: {
    minutely: minuteEntry[];
    hourly: ForecastEntry[];
    daily: ForecastEntry[];
  };
  code: string;
}

export interface minuteEntry {
  time: string;
  values: {
    cloudBase: number;
    cloudCeiling: number;
    cloudCover: number;
    dewPoint: number;
    freezingRainIntensity: number;
    humidity: number;
    precipitationProbability: number;
    pressureSurfaceLevel: number;
    rainIntensity: number;
    sleetIntensity: number;
    snowIntensity: number;
    temperature: number;
    temperatureApparent: number;
    uvHealthConcern: number;
    uvIndex: number;
    visibility: number;
    weatherCode: number;
    windDirection: number;
    windGust: number;
    windSpeed: number;
  };
}

export interface hourEntry {
  time: string;
  values: {
    cloudBase: number;
    cloudCeiling: number;
    cloudCover: number;
    dewPoint: number;
    evapotranspiration: number;
    freezingRainIntensity: number;
    humidity: number;
    iceAccumulation: number;
    iceAccumulationLwe: number;
    precipitationProbability: number;
    pressureSurfaceLevel: number;
    rainAccumulation: number;
    rainAccumulationLwe: number;
    rainIntensity: number;
    sleetAccumulation: number;
    sleetAccumulationLwe: number;
    sleetIntensity: number;
    snowAccumulation: number;
    snowAccumulationLwe: number;
    snowDepth: number;
    snowIntensity: number;
    temperature: number;
    temperatureApparent: number;
    uvHealthConcern: number;
    uvIndex: number;
    visibility: number;
    weatherCode: number;
    windDirection: number;
    windGust: number;
    windSpeed: number;
  };
}

export interface ForecastEntry {
  startTime: string; // ISO 8601 format date string
  values: ForecastValues;
}

export interface ForecastValues {
  temperature: number; // Temperature in the specified units
  temperatureApparent: number; // Feels-like temperature
  windSpeed: number; // Wind speed in the specified units
  humidity: number; // Relative humidity in percentage
  precipitationProbability: number; // Probability of precipitation
  weatherCode: number;
  [key: string]: number; // Other possible forecast values
}

type Unit = "metric" | "imperial";

export async function getForecast(location: string, units: Unit = "metric") {
  const options = { method: "GET", headers: { accept: "application/json" } };
  const url = encodeURI(
    `https://api.tomorrow.io/v4/weather/forecast?location=${location}&units=${units}&apikey=${process.env.TOMORROW_API_KEY}`
  );
  const response = await fetch(url, options)
    .then((response) => response.json())
    .catch((err) => console.error(err, "url:", url));
  console.log("Calling tomorrow.io");
  return response;
}
